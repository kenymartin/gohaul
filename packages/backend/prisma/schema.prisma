generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  TRANSPORTER
}

enum ShipmentStatus {
  PENDING
  AWAITING_BIDS
  BID_ACCEPTED
  IN_TRANSIT
  DELIVERED
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  shipments    Shipment[] @relation("CustomerShipments")
  bids         Bid[]      @relation("TransporterBids")
  assignments  Shipment[] @relation("TransporterAssignments")
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  @@map("users")
}

model Shipment {
  id          String         @id @default(uuid())
  customerId  String
  customer    User           @relation("CustomerShipments", fields: [customerId], references: [id])
  origin      String
  destination String
  size        String
  weight      Float
  description String
  status      ShipmentStatus @default(PENDING)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  bids             Bid[]
  assignedTo       User?    @relation("TransporterAssignments", fields: [transporterId], references: [id])
  transporterId    String?
  trackings        Tracking[]
  messages         Message[]

  @@map("shipments")
}

model Bid {
  id          String   @id @default(uuid())
  shipmentId  String
  shipment    Shipment @relation(fields: [shipmentId], references: [id])
  transporterId String
  transporter  User    @relation("TransporterBids", fields: [transporterId], references: [id])
  price       Float
  eta         DateTime
  status      String   @default("PENDING") // PENDING, ACCEPTED, REJECTED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("bids")
}

model Tracking {
  id          String   @id @default(uuid())
  shipmentId  String
  shipment    Shipment @relation(fields: [shipmentId], references: [id])
  location    String
  status      String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("trackings")
}

model Message {
  id          String   @id @default(uuid())
  shipmentId  String
  shipment    Shipment @relation(fields: [shipmentId], references: [id])
  senderId    String
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  receiverId  String
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  content     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("messages")
} 